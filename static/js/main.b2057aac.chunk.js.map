{"version":3,"sources":["imagePreview/assets/img/folder_5.svg","imagePreview/assets/img/x.svg","imagePreview/ImagePreview.jsx","App.js","reportWebVitals.js","index.js","imagePreview/assets/style.module.scss"],"names":["ImagePreview","useState","image","setImage","isUpload","setIsUpload","className","styles","container","layout","imageUpload","id","uploadedImage","src","alt","onClick","htmlFor","href","style","color","type","accept","onChange","e","target","files","reader","FileReader","onload","result","readAsDataURL","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"uNAAe,ICAA,I,MCKA,SAASA,IACtB,MAA0BC,qBAA1B,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAYA,OACE,qBAAKC,UAAWC,IAAOC,UAAvB,SACE,sBAAKF,UAAWC,IAAOE,OAAvB,UACE,mDACA,8CACA,qBAAKH,UAAWC,IAAOL,MAAvB,SACE,qBAAKI,UAAWC,IAAOG,YAAvB,SACIN,EAoBA,qBAAKE,UAAWC,IAAOP,aAAvB,SAUE,qBACEW,GAAIJ,IAAOK,cACXC,IAAKX,EACLY,IAAI,eACJC,QAAS,WACPV,GAAY,GACZF,EAAS,WAnCf,qCACE,wBAAOa,QAAQ,eAAf,UAOE,mBAAGC,KAAK,IAAR,oBACA,mBAAGC,MAAO,CAAEC,MAAO,QAAnB,2CAEF,uBACER,GAAG,eACHS,KAAK,OACLC,OAAO,UACPC,SAlChB,SAA2BC,GACzB,GAAIA,EAAEC,OAAOC,OAASF,EAAEC,OAAOC,MAAM,GAAI,CACvC,IAAIC,EAAS,IAAIC,WAEjBD,EAAOE,OAAS,SAAUL,GACxBpB,EAASoB,EAAEC,OAAOK,QAClBxB,GAAY,IAEdqB,EAAOI,cAAcP,EAAEC,OAAOC,MAAM,oBCN3BM,MARf,WACE,OACE,8BACE,cAAC/B,EAAD,OCOSgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,UAAY,yBAAyB,OAAS,sBAAsB,MAAQ,qBAAqB,YAAc,2BAA2B,aAAe,4BAA4B,cAAgB,6BAA6B,UAAY,4B","file":"static/js/main.b2057aac.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/folder_5.3657bb8a.svg\";","export default __webpack_public_path__ + \"static/media/x.f2fd30b4.svg\";","import { React, useState } from 'react';\r\nimport styles from './assets/style.module.scss';\r\nimport folder from './assets/img/folder_5.svg';\r\nimport close from './assets/img/x.svg';\r\n\r\nexport default function ImagePreview() {\r\n  const [image, setImage] = useState();\r\n  const [isUpload, setIsUpload] = useState(false);\r\n  function handleImageChange(e) {\r\n    if (e.target.files && e.target.files[0]) {\r\n      let reader = new FileReader();\r\n\r\n      reader.onload = function (e) {\r\n        setImage(e.target.result);\r\n        setIsUpload(true);\r\n      };\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.layout}>\r\n        <h2>Upload your image</h2>\r\n        <p>Image Preview</p>\r\n        <div className={styles.image}>\r\n          <div className={styles.imageUpload}>\r\n            {!isUpload ? (\r\n              <>\r\n                <label htmlFor='upload-input'>\r\n                  {/* <img\r\n                    src={folder}\r\n                    draggable={'false'}\r\n                    alt='placeholder'\r\n                    style={{ width: '5rem' }}\r\n                  /> */}\r\n                  <a href='#'>Upload</a>\r\n                  <p style={{ color: '#444' }}>Click to upload your image</p>\r\n                </label>\r\n                <input\r\n                  id='upload-input'\r\n                  type='file'\r\n                  accept='image/*'\r\n                  onChange={handleImageChange}\r\n                />\r\n              </>\r\n            ) : (\r\n              <div className={styles.ImagePreview}>\r\n                {/* <img\r\n                  className={styles.closeIcon}\r\n                  src={close}\r\n                  alt='close'\r\n                  onClick={() => {\r\n                    setIsUpload(false);\r\n                    setImage(null);\r\n                  }}\r\n                /> */}\r\n                <img\r\n                  id={styles.uploadedImage}\r\n                  src={image}\r\n                  alt='uploaded-img'\r\n                  onClick={() => {\r\n                    setIsUpload(false);\r\n                    setImage(null);\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import ImagePreview from './imagePreview/ImagePreview';\n\nfunction App() {\n  return (\n    <div>\n      <ImagePreview />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__20WLq\",\"layout\":\"style_layout__3Zm0U\",\"image\":\"style_image__259dd\",\"imageUpload\":\"style_imageUpload__1e7k5\",\"ImagePreview\":\"style_ImagePreview__A_R3f\",\"uploadedImage\":\"style_uploadedImage__3fNLG\",\"closeIcon\":\"style_closeIcon__223YS\"};"],"sourceRoot":""}